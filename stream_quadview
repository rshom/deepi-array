#! /usr/bin/env python3
''' Open the camera streams and display as a quadview

'''

import logging
import time
import numpy as np

import cv2 as cv

from picamarray import MultiStreamRx

logging.basicConfig(format='%(levelname)s: %(message)s',level=logging.DEBUG)

cams = [1,2,3,4]
addrs = [(f'10.0.1{n}.2',8000) for n in cams]
rotations = [ cv.ROTATE_180, None, cv.ROTATE_180, None, ]
calibrations = [f"deepi{n}.yaml" for n in cams]

# rotations = [None for n in cams]
calibrations = [None for n in cams]

def combine_frames(frames):
    return np.concatenate((np.concatenate((frames[3],frames[1]),axis=1),
                           np.concatenate((frames[0],frames[2]),axis=1)),
                          axis=0)


save_frames = True
from pathlib import Path
frame_dir = Path("./calibration_data/synced_frames")
save_delay  = 5

def save_frames(frames, cam_order=cams):
    t = round(time.time())
    for n in cam_order:
        fpath = frame_dir / f"{t}-{n}.png"
        logging.debug(f"Saving frame: {fpath}")
        cv.imwrite(f"{fpath}",frames[n-1])

if save_frames:        
    logging.info(f"Saving frames every {save_delay} into {frame_dir}.")


logging.info("Opening streams")
with MultiStreamRx(addrs, calibrations, rotations) as streams:

    logging.info("Starting streams")
    [stream.start() for stream in streams]
    
    cnt = 0
    start = time.time()
    last_save = start
    while True:
        
        frames = [stream.frame for stream in streams]

        if (time.time()-last_save) > save_delay:
            save_frames(frames)
            last_save = time.time()
        
        #[logging.debug(frame.shape) for frame in frames]
        frame = combine_frames(frames)
        
        cv.imshow("Stream",frame)
        cnt = cnt+1
        
        k = cv.waitKey(1)
        if k != -1:
            logging.debug(f"Key press: {k}")
            # ctrl.send_cmd(keycmd(k))
            
            if k==27:
                logging.debug("Breaking loop")
                # close out on escape
                break
    finish = time.time()

cv.destroyAllWindows()

logging.info(f'Displayed {cnt} frames in {finish-start:.1f} seconds '\
             f'({cnt/(finish-start):.1f}fps)')


# ctrl.close()
