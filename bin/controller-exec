#!/bin/sh
# Run through a series of autofunctions whenever the array is powered on


min_hd_space=$((1024*1024))	# 1 GB
savedir=/mnt/usb1

echo "INFO: Controller powered on"


ifaceup () {
    file=/sys/class/net/$1/operstate
    
    if [ -f "$file" ]; then
	    status=$(cat $file)
	    # status is likely but not definitely "up"
        # could be "unknown"
    else
        # if no file, it is "down"
	    status="down"
    fi
    
    echo "INFO: iface $1: $status"
    
    if [ ! "$status" = "down" ]; then
	    return 0
    else
	    return 1
    fi
}

backup_node () {

    echo "INFO: backing up $1"

    viddir=$savedir/$1/Videos
    logdir=$savedir/$1/log
    
    if [ ! -d "$logdir" ];
    then
	echo "INFO: Creating log backup dir: $logdir"
	mkdir -p $logdir || echo "ERROR: Failed to create $logdir"
    else
	echo "DEBUG: $logdir exists"
    fi
    
    if [ ! -d "$viddir" ];
    then
	echo "INFO: video backup dir: $viddir"
	mkdir -p $viddir || echo "ERROR: Failed to create $viddir"
    else
	echo "DEBUG: $viddir exists"
    fi
    
    rsync -v --timeout=20 -a pi@$1:logs/ $logdir || echo "ERROR: Back up $1 logs failed."
    rsync -v --timeout=20 -a pi@$1:Videos/ $viddir || echo "ERROR: back up $1 videos failed."

    return $?
}


# TODO: pipe to logger

echo "INFO: Controller powered on"
timedatectl status
echo "INFO: Syncing time"	# TODO
sudo hwclock -s || echo "ERROR: timesync failed"
timedatectl status

# Check network interfaces
echo "Waiting give time for nodes to boot up";
sleep 30;
sudo resethub || echo "ERROR: reset hub failed"
/home/pi/deepi-array/bin/wait_for_connections || echo "ERROR: Wait for connections script failed"

echo "Executing node commands"
parallel-ssh -h ~/hosts.txt "sh /home/pi/node-exec | ts &> /home/pi/logs/$(date -I'ns').log"

# Check hard drive space
echo "INFO: mounting harddrive"
sudo mount -a || echo "ERROR: harddrive failed to mount"
if ! mountpoint -q $savedir
then
    echo "WARNING: Hardrive not detected"
    savedir=/home/pi
else
    savedir=/mnt/usb1
fi
echo "INFO: backing up to $savedir"

free_space=`df --output=avail $savedir | tail -n1`
echo "INFO: Free space: $free_space ($((free_space/1024/1024)) GB)"


echo "INFO: backing up controller logs"
rsync -v --timeout=20 -a /home/pi/logs/ $savedir || echo "ERROR: back up of controller logs failed."

# If space back up nodes
if [ "$free_space" -lt "$min_hd_space" ]
then
    echo "ERROR: not enough space"
    # TODO: quit
else
    echo "INFO: Backing up nodes"
    for n in 1 2 3 4 5 6
    do
	if ifaceup usb$n
	then
        echo "INFO: Backing up 10.0.1$n.2"
	    backup_node "10.0.1$n.2" || echo "ERROR: Back up 10.0.1$n.2 failed"
	else
	    echo "WARNING: Back up 10.0.1$n.2 skipped"
	fi
    done
    echo "DEBUG: waiting for backups to complete"
    wait
    echo "DEBUG: backups complete"
fi   

# Stay up if there is an outside connection
ifaceup eth0; eth0_up=$?
ifaceup wlan0; wlan0_up=$?

# Check if user is logged in
# NOTE: should not matter
# if who | grep -q "pi"
# then
#     echo "INFO: pi is logged in: Staying up"
#     exit 0
# else
#     echo "INFO: pi is not logged in"
# fi

echo "INFO: controller-exec completed"

echo "DEBUG: wlan0: $wlan0_up";
echo "DEBUG: eth0 : $eth0_up";

if  [ $eth0_up -eq 0 ] ||  [ $wlan0_up -eq 0 ]
then
    echo "INFO: Outside connection detected: Staying up"
    exit 0
else
    echo "INFO: No outside connection. Shutting down"
    parallel-ssh -h ~/hosts.txt "sudo shutdown now"
    sleep 10 # give time to shutdown
    sudo shutdown now
fi

exit 0

